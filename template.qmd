---
title: "Lab 5: Sea-Level Rise"
author: "Jonah Schaechter js336>"
jupyter: julia-1.10
date: 2024-02-16

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"
bibliography: references.bib
---

# Setup

## The usual

As always:

1. Clone the lab repository to your computer
1. Open the lab repository in VS Code
1. Open the Julia REPL and activate, then instantiate, the lab environment
1. Make sure you can render: `quarto render template.qmd` in the terminal.
    - If you run into issues, try running `] build IJulia` in the Julia REPL (`]` enters the package manager).
    - If you still have issues, try opening up `blankfile.py`. That should trigger VS Code to give you the option to install the Python extension, which you should do. Then you should be able to open a menu in the bottom right of your screen to select which Python installation you want VS Code to use.


## Load packages

```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using Plots
using StatsPlots
using Unitful

Plots.default(; margin=5Plots.mm)
```

## Local package

```{julia}
using Revise
using HouseElevation
```

Choosing Galveston Pier 21, Texas
The guage is at 29° 18.6 N, 94° 47.6 W
https://maps.app.goo.gl/GyanSMA2fp9rkVrT9

Our building is 302 17th St, Galveston, TX 77550,
Home area as estimated by google maps: 30ftx50ft home = 1500ft^2
Home value from zillow: 247,700 (Round up to 250,000)

The home is 4.41 feet or 1.34 meters above sea level in elevation.
Looking at it on street view, the house appears to be on concrete blocks about 6 inches tall, giving it an effective height of 4.91 feet.  Round this up to 5 so that it works.

Row 98 from the data is two-story, no basement in Galveston, so we'll be using that for our depth-damage curve.  The home is on concrete blocks, so we can be confident that it doesn't have a basement.


```{julia}
#| output: false
house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "Two-story, no basement in Galveston"
    row = @rsubset(haz_fl_dept, :Column1 == 98)[1, :,] # select the row I want
    area = 1500u"ft^2"
    height_above_gauge = 5u"ft"  #Previously used 4.91, had to round up to 5 to make it work with functions
    House(
        row;
        area=area,
        height_above_gauge=height_above_gauge,
        value_usd=250_000,
    )
end
```

```{julia}
#| code-fold: true
let
    depths = uconvert.(u"ft", (-7.0u"ft"):(1.0u"inch"):(30.0u"ft"))
    damages = house.ddf.(depths) .* house.value_usd ./ 1000
    scatter(
        depths,
        damages;
        xlabel="Flood Depth",
        ylabel="Damage (Thousand USD)",
        label="$(house.description)\n($(house.source))",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
end
```

Check we can get the elevation cost:
```{julia}
elevation_cost(house, 10u"ft")
```

And then plot elevation cost so we can visually make sure that it makes sense:

```{julia}
let
    elevations = 0u"ft":0.25u"ft":14u"ft"
    costs = [elevation_cost(house, eᵢ) for eᵢ in elevations]
    scatter(
        elevations,
        costs ./ 1_000;
        xlabel="Elevation",
        ylabel="Cost (Thousand USD)",
        label="$(house.description)\n($(house.source))",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
end
```

Time to model sea level rise!

Read in the sea level rise data:

```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end
println("There are $(length(slr_scenarios)) parameter sets")
```

Plot data to visually verify that we read it in correctly:

```{julia}
let
    years = 1900:2150
    p = plot(;
        xlabel="Year",
        ylabel="Mean sea-level (ft)\nwith respect to the year 2000",
        label="Oddo et al. (2017)",
        legend=false
    )
    for s in rand(slr_scenarios, 250)
        plot!(p, years, s.(years); color=:lightgrey, alpha=0.5, linewidth=0.5)
    end
    p
end
```
Storm surge distribution function.  We're taking a sample around our flood distribution values that we used in the previous labs.

```{julia}
function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.5))
    ξ = rand(Normal(0.1, 0.05))
    GeneralizedExtremeValue(μ, σ, ξ)
end
```

Draw a distribution of storm surge values:

```{julia}
[draw_surge_distribution() for _ in 1:1000]
```

Get some discount rate samples.  I'm choosing to keep the sampling as-is here.  

Justfication:
Current USA interest rates are at 5% and I personally think they'll stay high for a while (I can exlain my reasoning for this but idk if it's on-topic for this lab), but I'm compensating for the fact that I don't believe assuming that people will be richer in the near future in Galveston (Speaking as someone who grew up in one, tourism-based economies are just as liable to shrink as they are to grow), so I'm taking it back down from 5% to 4% to compensate for this.

```{julia}
#| output: false
function draw_discount_rate()
    return rand(Normal(0.04, 0.02))
end
```
Model the house from 2024 to 2083

```{julia}
#| output: false
p = ModelParams(
    house=house,
    years=2024:2083
)
```

Get SOW from surge distribution, discount rate, and sea level rise scenarios
```{julia}
#| output: false
sow = SOW(
    rand(slr_scenarios),
    draw_surge_distribution(),
    draw_discount_rate()
)
```
Establish an action:

```{julia}
#| output: false
a = Action(3.0u"ft")
```

Find Net Present Value:

```{julia}
res = run_sim(a, sow, p)
```

```{julia}

Column_length = 100
# I'm not well caught up on predictions or galveston weather, so I feel most comfortable sampling randomly for SLR and storm surge. 
#For discount rate, I'd say I'm confident enough in my knowledge of macroeconomics to choose a distribution, but not enough to bias that distribution in any given direction.
sows = [SOW(rand(slr_scenarios), draw_surge_distribution(), draw_discount_rate()) for _ in 1:Column_length] 

#For situations like these where sample sizes are less than 10, and randomness or uncertainty aren't part of how high we elevate our house, I believe having a structured set of actions that we can reliable compare to be the best choice
num_choices = 9
actions = []
for i in range(0, 9, 10)
    for j in range(1, 10)
        push!(actions, Action(i*1u"ft"))
    end
end
#actions = [Action(i*1u"ft") for i in range(0, 9, 10)]

#actions = [Action(3.0u"ft") for _ in 1:Column_length]
#actions = vcat([Action(0.0u"ft") for _ in 1:5],[Action(1.0u"ft") for _ in 1:5])
results = [run_sim(a, s, p) for (a, s) in zip(actions, sows)]
```

Make a data frame with our data:

```{julia}
df = DataFrame(
    npv=results,
    Δh_ft=[a.Δh_ft for a in actions],
    slr_a=[s.slr.a for s in sows],
    slr_b=[s.slr.b for s in sows],
    slr_c=[s.slr.c for s in sows],
    slr_tstar=[s.slr.tstar for s in sows],
    slr_cstar=[s.slr.cstar for s in sows],
    surge_μ=[s.surge_dist.μ for s in sows],
    surge_σ=[s.surge_dist.σ for s in sows],
    surge_ξ=[s.surge_dist.ξ for s in sows],
    discount_rate=[s.discount_rate for s in sows],
)
```


For a constant action of elevating by 3 feet, let's look at how discount rate impacts our net present value:

```{julia}
let
    Discount_Rate = df.discount_rate
    NPV = (df.npv)./1_000_000
    Height = Int.(ustrip.(df.Δh_ft))
    #have a label for each increment of elevation
    labels = ["$i feet of elevation" for i in 0:9]
    scatter(
        Discount_Rate,
        NPV;
        color=Height,
        xlabel="Discount Rate",
        ylabel="NPV Millions of (USD)",
        group=labels,#repeat('0':'9', 1),
        #label = ["a" "b"],#[i] for i in 0:9,
        #label="NPV given discount rate for 3ft elevation",
        legend=:bottomright,
        size=(800, 400),
        yformatter=:plain, # prevents scientific notation
    )
end
```

Testing Cell: 
```{julia}
#Int.(ustrip.(df.Δh_ft))
println(repeat('0':'9', 1))
#println([Action(i*1u"ft") for i in range(0, 12, 10)])
```